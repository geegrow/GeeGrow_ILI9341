/*!
 * @file GeeGrow_ILI9341_libLettersAscii.h
 *
 * This is an addon library for the GeeGrow ILI9341 TFT 240x320 display,
 * which implements bitmaps of ASCII letters
 * https://www.geegrow.ru
 *
 * @section author Author
 * Written by Anton Pomazanov
 *
 * @section license License
 * BSD license, all text here must be included in any redistribution.
 *
 */

#ifndef GEEGROW_ILI9341_LIBLETTERS_ASCII_H
#define GEEGROW_ILI9341_LIBLETTERS_ASCII_H

#include <Arduino.h>
#include <avr/pgmspace.h>
#include <GeeGrow_ILI9341_defines.h>

/**************************************************************************/
/*!
    @brief    Class that stores state and functions for implementing bitmaps
              of ASCII letters
*/
/**************************************************************************/
class GeeGrow_ILI9341_libLettersAscii{
    public:
        GeeGrow_ILI9341_libLettersAscii(){}
        ~GeeGrow_ILI9341_libLettersAscii(){}
        uint16_t* getBitMap(char _char);
};

/**************************************************************************/
/*!
    @brief    Bitmaps of ASCII letters
*/
/**************************************************************************/
const uint16_t fontLibLettersAscii[] PROGMEM = {
    0x0FF8, 0x0FFC, 0x0086, 0x0082, 0x0086, 0x0FFC, 0x0FF8, 0x0000,        // A
    0x0802, 0x0FFE, 0x0FFE, 0x0822, 0x0822, 0x0FFE, 0x07DC, 0x0000,        // B
    0x07FC, 0x0FFE, 0x0802, 0x0802, 0x0802, 0x0E0E, 0x060C, 0x0000,        // C
    0x0802, 0x0FFE, 0x0FFE, 0x0802, 0x0802, 0x0FFE, 0x07FC, 0x0000,        // D
    0x0802, 0x0FFE, 0x0FFE, 0x0842, 0x08E2, 0x0C06, 0x0E0E, 0x0000,        // E
    0x0802, 0x0FFE, 0x0FFE, 0x0042, 0x00E2, 0x0006, 0x000E, 0x0000,        // F
    0x07FC, 0x0FFE, 0x0802, 0x0802, 0x0842, 0x0FCE, 0x0FCC, 0x0000,        // G
    0x0FFE, 0x0FFE, 0x0040, 0x0040, 0x0040, 0x0FFE, 0x0FFE, 0x0000,        // H
    0x0000, 0x0000, 0x0802, 0x0FFE, 0x0FFE, 0x0802, 0x0000, 0x0000,        // I
    0x0600, 0x0E00, 0x0800, 0x0802, 0x0FFE, 0x07FE, 0x0002, 0x0000,        // J
    0x0802, 0x0FFE, 0x0FFE, 0x0040, 0x00E0, 0x0FBE, 0x0F1E, 0x0000,        // K
    0x0802, 0x0FFE, 0x0FFE, 0x0802, 0x0800, 0x0C00, 0x0E00, 0x0000,        // L
    0x0FFE, 0x0FFC, 0x0038, 0x0070, 0x0038, 0x0FFC, 0x0FFE, 0x0000,        // M
    0x0FFE, 0x0FFC, 0x0038, 0x0070, 0x00E0, 0x0FFE, 0x0FFE, 0x0000,        // N
    0x07FC, 0x0FFE, 0x0802, 0x0802, 0x0802, 0x0FFE, 0x07FC, 0x0000,        // O
    0x0802, 0x0FFE, 0x0FFE, 0x0842, 0x0042, 0x007E, 0x003C, 0x0000,        // P
    0x07FC, 0x0FFE, 0x0802, 0x0E02, 0x0C02, 0x3FFE, 0x27FC, 0x0000,        // Q
    0x0802, 0x0FFE, 0x0FFE, 0x0042, 0x00C2, 0x0FFE, 0x0F3C, 0x0000,        // R
    0x060C, 0x0E1E, 0x0832, 0x0862, 0x08C2, 0x0F8E, 0x070C, 0x0000,        // S
    0x0000, 0x000E, 0x0806, 0x0FFE, 0x0FFE, 0x0806, 0x000E, 0x0000,        // T
    0x07FE, 0x0FFE, 0x0800, 0x0800, 0x0800, 0x0FFE, 0x07FE, 0x0000,        // U
    0x01FE, 0x03FE, 0x0600, 0x0C00, 0x0600, 0x03FE, 0x01FE, 0x0000,        // V
    0x0FFE, 0x07FE, 0x0300, 0x0180, 0x0300, 0x07FE, 0x0FFE, 0x0000,        // W
    0x0C06, 0x0F1E, 0x03B8, 0x00F0, 0x03B8, 0x0F1E, 0x0C06, 0x0000,        // X
    0x0000, 0x001E, 0x083E, 0x0FE0, 0x0FE0, 0x083E, 0x001E, 0x0000,        // Y
    0x0E0E, 0x0F06, 0x0982, 0x08C2, 0x0862, 0x0C3E, 0x0E1E, 0x0000,        // Z

    0x0700, 0x0FA0, 0x08A0, 0x08A0, 0x07E0, 0x0FC0, 0x0800, 0x0000,        // a
    0x0002, 0x0FFE, 0x0FFE, 0x0820, 0x0820, 0x0FE0, 0x07C0, 0x0000,        // b
    0x07C0, 0x0FE0, 0x0820, 0x0820, 0x0820, 0x0C60, 0x0440, 0x0000,        // c
    0x07C0, 0x0FE0, 0x0820, 0x0822, 0x07FE, 0x0FFE, 0x0800, 0x0000,        // d
    0x07C0, 0x0FE0, 0x0920, 0x0920, 0x0920, 0x0DE0, 0x05C0, 0x0000,        // e
    0x0000, 0x0820, 0x0FFC, 0x0FFE, 0x0822, 0x0026, 0x0004, 0x0000,        // f
    0x27C0, 0x6FE0, 0x4820, 0x4820, 0x7FC0, 0x3FE0, 0x0020, 0x0000,        // g
    0x0802, 0x0FFE, 0x0FFE, 0x0040, 0x0020, 0x0FE0, 0x0FC0, 0x0000,        // h
    0x0000, 0x0000, 0x0820, 0x0FEC, 0x0FEC, 0x0800, 0x0000, 0x0000,        // i
    0x3000, 0x7000, 0x4000, 0x4020, 0x7FEC, 0x3FEC, 0x0000, 0x0000,        // j
    0x0802, 0x0FFE, 0x0FFE, 0x0180, 0x03C0, 0x0E60, 0x0C20, 0x0000,        // k
    0x0000, 0x0000, 0x0802, 0x0FFE, 0x0FFE, 0x0800, 0x0000, 0x0000,        // l
    0x0FE0, 0x0FE0, 0x0060, 0x07C0, 0x0060, 0x0FE0, 0x0FC0, 0x0000,        // m
    0x0020, 0x0FE0, 0x0FC0, 0x0020, 0x0020, 0x0FE0, 0x0FC0, 0x0000,        // n
    0x07C0, 0x0FE0, 0x0820, 0x0820, 0x0820, 0x0FE0, 0x07C0, 0x0000,        // o
    0x4020, 0x7FE0, 0x7FC0, 0x4820, 0x0820, 0x0FE0, 0x07C0, 0x0000,        // p
    0x07C0, 0x0FE0, 0x0820, 0x4820, 0x7FE0, 0x7FE0, 0x4000, 0x0000,        // q
    0x0820, 0x0FE0, 0x0FC0, 0x0060, 0x0020, 0x0060, 0x0060, 0x0000,        // r
    0x0440, 0x0CE0, 0x09A0, 0x0920, 0x0B20, 0x0E60, 0x0440, 0x0000,        // s
    0x0000, 0x0020, 0x0020, 0x07FC, 0x0FFE, 0x0820, 0x0420, 0x0000,        // t
    0x07E0, 0x0FE0, 0x0800, 0x0800, 0x07E0, 0x0FE0, 0x0800, 0x0000,        // u
    0x01E0, 0x03E0, 0x0600, 0x0C00, 0x0600, 0x03E0, 0x01E0, 0x0000,        // v
    0x07E0, 0x0FE0, 0x0C00, 0x07C0, 0x0C00, 0x0FE0, 0x07E0, 0x0000,        // w
    0x0C60, 0x0EE0, 0x0280, 0x0100, 0x0280, 0x0EE0, 0x0C60, 0x0000,        // x
    0x47E0, 0x4FE0, 0x4800, 0x4800, 0x6800, 0x3FE0, 0x1FE0, 0x0000,        // y
    0x0C60, 0x0E20, 0x0B20, 0x09A0, 0x08E0, 0x0860, 0x0C60, 0x0000         // z
};

#endif /* GEEGROW_ILI9341_LIBLETTERS_ASCII_H */
